ggplot(medias) + geom_line(aes(x=n, y=media)) + facet_wrap(~sd, ncol = 3, dir = "h")
ggplot(medias) + geom_line(aes(x=n, y=media)) + facet_wrap(~sd, ncol = 3, strip.position = "top")
ggplot(medias) + geom_line(aes(x=n, y=media)) + facet_wrap(~sd, ncol = 3, strip.position = "bottom")
ggplot(medias) + geom_line(aes(x=n, y=media)) + facet_wrap(~sd, ncol = 3, strip.position = "left")
ggplot(medias) + geom_line(aes(x=n, y=media)) + facet_wrap(~sd, ncol = 3, strip.position = "right")
ggplot(medias) + geom_line(aes(x=n, y=media)) + facet_wrap(~sd, ncol = 3)
ggplot(medias)
plot(medias)
moneda <- function(){
primer_lanzamiento <- sample(c(-1,1), 1,replace = F)  ##Xq gano un punto o pierdo un punto. No hace falta ni el 1 ni el replace
contador <- primer_lanzamiento
nro_lanzamientos <- 1
while (contador != 0) {
siguiente_lanzamiento <- sample(c(-1,1), 1,replace = F)
contador <- contador + siguiente_lanzamiento
nro_lanzamientos <- nro_lanzamientos + 1
}
return(nro_lanzamientos)
}
# Replicmaos
N <- 100
lanzamientos_requeridos <- replicate(N, moneda()) ## 'Replicate' replica la funcion N cantidad de veces.
lanzamientos_requeridos
table(lanzamientos_requeridos)
dia <- 60*60*8  ## 8 horas, 60 minutos en cada hora, 60 segundos en cada minuto.
max(lanzamientos_requeridos) / dia ## Para tener la cantidad medida en dias del que mas jugo.
N <- 100
lanzamientos_requeridos <- replicate(N, moneda()) ## 'Replicate' replica la funcion N cantidad de veces.
dia <- 60*60*8  ## 8 horas, 60 minutos en cada hora, 60 segundos en cada minuto.
max(lanzamientos_requeridos) / dia
N <- 100
lanzamientos_requeridos <- replicate(N, moneda()) ## 'Replicate' replica la funcion N cantidad de veces.
dia <- 60*60*8  ## 8 horas, 60 minutos en cada hora, 60 segundos en cada minuto.
max(lanzamientos_requeridos) / dia
N <- 100
lanzamientos_requeridos <- replicate(N, moneda()) ## 'Replicate' replica la funcion N cantidad de veces.
dia <- 60*60*8  ## 8 horas, 60 minutos en cada hora, 60 segundos en cada minuto.
max(lanzamientos_requeridos) / dia
N <- 100
lanzamientos_requeridos <- replicate(N, moneda()) ## 'Replicate' replica la funcion N cantidad de veces.
dia <- 60*60*8  ## 8 horas, 60 minutos en cada hora, 60 segundos en cada minuto.
max(lanzamientos_requeridos) / dia
N <- 100
lanzamientos_requeridos <- replicate(N, moneda()) ## 'Replicate' replica la funcion N cantidad de veces.
N <- 1000
lanzamientos_requeridos <- replicate(N, moneda()) ## 'Replicate' replica la funcion N cantidad de veces.
dia <- 60*60*8  ## 8 horas, 60 minutos en cada hora, 60 segundos en cada minuto.
max(lanzamientos_requeridos) / dia
completa_album <- function(){
figuritas_a_completar <- 1:670
album_completo <- FALSE
nro_de_sobres <- 0
while (! album_completo){
sobre <- sample(1:670, 5, replace = F)   ## Replace = F para que me saque 5 figuritas distintas del paquete.
nro_sobres <- nro_sobres + 1
figuritas_a_completar <- figuritas_a_completar[! figuritas_a_completar %in% sobre]  ## Quedate con las que no salieron todavia.
if (length(figuritas_a_completar) == 0){
album_completo <- TRUE
}
}
return(nro_de_sobres)
}
completa_album()
completa_album <- function(){
figuritas_a_completar <- 1:670
album_completo <- FALSE
nro_de_sobres <- 0
while (! album_completo){
sobre <- sample(1:670, 5, replace = F)   ## Replace = F para que me saque 5 figuritas distintas del paquete.
nro_de_sobres <- nro_de_sobres + 1
figuritas_a_completar <- figuritas_a_completar[! figuritas_a_completar %in% sobre]  ## Quedate con las que no salieron todavia.
if (length(figuritas_a_completar) == 0){
album_completo <- TRUE
}
}
return(nro_de_sobres)
}
completa_album()
completa_album()
completa_album()
completa_album()
completa_album()
N <- 100
sobres_necesarios <- replicate(N, completa_album()) ## Me calcula 100 veces la funcion completa_album y lo guarda en la variable de sobres que necesite.
sobres_necesarios
quantile(sobres_necesarios, c(0.05, 0.95))  ## Busco los cuantiles 5% y 95% --> Esto me captura el 90% de la muestra
ggplot() + geom_density(x=sobres_necesarios)
ggplot() + geom_density(aes(x=sobres_necesarios))
N <- 100
sobres_necesarios <- replicate(N, completa_album(repetidas = F)) ## Si repetidas es F, el sample van a ser todos distintos.
N <- 100
sobres_necesarios <- replicate(N, completa_album(repetidas=F)) ## Si repetidas es F, el sample van a ser todos distintos.
N <- 100
sobres_necesarios <- replicate(N, completa_album(repetidas = T))
completa_album <- function(repetidas){
figuritas_a_completar <- 1:670
album_completo <- FALSE
nro_de_sobres <- 0
while (! album_completo){
sobre <- sample(1:670, 5, replace = repetidas)   ## Replace = F para que me saque 5 figuritas distintas del paquete.
nro_de_sobres <- nro_de_sobres + 1
figuritas_a_completar <- figuritas_a_completar[! figuritas_a_completar %in% sobre]  ## Quedate con las que no salieron todavia.
if (length(figuritas_a_completar) == 0){
album_completo <- TRUE
}
}
return(nro_de_sobres)
}
N <- 100
sobres_necesarios <- replicate(N, completa_album(repetidas=F)) ## Si repetidas es F, el sample van a ser todos distintos.
quantile(sobres_necesarios, c(0.05, 0.95))
N <- 100
sobres_necesarios <- replicate(N, completa_album(repetidas = T))
quantile(sobres_necesarios, c(0.05, 0.95))
?matrix
y <- matrix(c(1,2,3,4), nrow = 2, ncol = 2, byrow = T)
View(y)
dim(y)[1]
dim(y)
?&
y[1]
y[3]
y[1,2]
y[1,1]
y[1,2]
y[2,2]
y[2]
det_2x2 <- function(x){
if (! is.matrix(x)){
stop("Debe ingresa una matriz.")
}else if (dim(x)[1] != dim(x)[2]){
stop("Debe ingresar una matriz cuadrada")
}else if (dim(x)[1] != 2 && dim(x)[2] != 2){
stop('Debe ingresar una matriz de 2x2.')
}else{
cuenta <- (x[1,1] * x[2,2]) -(x[2,1] * x[1,2])
return(cuenta)
}
}
x <- matrix(c(2,5,4,7),nrow = 2, ncol = 2, byrow = T)
View(x)
det_2x2(x)
x <- matrix(c(2,5,7),nrow = 2, ncol = 2, byrow = T)
x <- matrix(c(2,5,4,7,3,4),nrow = 3, ncol = 3, byrow = T)
x <- matrix(c(2,5,4,7,3,4,1,2,3),nrow = 3, ncol = 3, byrow = T)
det_2x2(x)
det_2x2 <- function(x){
if (! is.matrix(x)){
stop("Debe ingresa una matriz.")
}else if (dim(x)[1] != dim(x)[2]){
stop("Debe ingresar una matriz cuadrada")
}else if (dim(x) != c(2,2)){
stop('Debe ingresar una matriz de 2x2.')
}else{
cuenta <- (x[1,1] * x[2,2]) -(x[2,1] * x[1,2])
return(cuenta)
}
}
det_2x2(x)
det_2x2 <- function(x){
if (! is.matrix(x)){
stop("Debe ingresa una matriz.")
}else if (dim(x)[1] != dim(x)[2]){
stop("Debe ingresar una matriz cuadrada")
}else if (dim(x)[1] != 2 && dim(x)[2] != 2){
stop('Debe ingresar una matriz de 2x2.')
}else{
cuenta <- (x[1,1] * x[2,2]) -(x[2,1] * x[1,2])
return(cuenta)
}
}
det_2x2(x)
x <- matrix(c(2,5,4,7,3,4),nrow = 3, ncol = 2, byrow = T)
det_2x2(x)
rm(list=ls())
library(forecast)
da=read.table("/Users/tomastemudio/Desktop/Di Tella/Tercer Año/Segundo Semestre/LAB/CLASES TEORICAS/CLASE 12/m-dec12910.txt",header=T)
#este archivo tiene los retornos mensuales de un portfolio CRSP de enero 1967 a diciembre 2009. Tiene 516 observaciones
head(da)
d10=da$dec10 # Nos quedamos con el decil 10 de las acciones
dec10=ts(d10,frequency=12,start=c(1967,1))
#par(mar = c(1,1,1,1))
#par(mfcol=c(2,1))
plot(dec10,xlab="year",ylab="returns")
title(main="(a): Simple returns")
acf(d10,lag=24) # las lineas horizontales punteadas representan dos desvios estandar para el estimador muestral de la acf
#t-ratio
f1=acf(d10,lag=24)
View(f1)
f1$acf
tt=f1$acf[13]*sqrt(516)
tt
?acf
View(f1)
##########################
#Cargamos ahora datos de los retornos mensuales de la accion de IBM
da=read.table("/Users/tomastemudio/Desktop/Di Tella/Tercer Año/Segundo Semestre/LAB/CLASES TEORICAS/CLASE 12/m-ibmsp6709.txt",header=T)
ibm=da$ibm
lnibm=log(ibm+1) # Transfer to log returns
acf(ibm,lag=100)
acf(lnibm,lag=100)
Box.test(ibm,lag=12,type="Ljung")
Box.test(lnibm,lag=12,type="Ljung")
########################################
#AR
random_walk <- rnorm(1000,0,1)
plot(random_walk,xlab="Instancia",ylab="Random Walk",type = "line")
?rnorm
acf(random_walk,lag=12)
acf(random_walk,lag=20)
acf(random_walk,lag=5)
acf(random_walk,lag=12)
simulates_ar_1 <- function(n,phi){
output <- numeric(n)
output[1] <- phi[1]
for (i in 2:n) {
output[i] <- phi[1]+output[i-1]*phi[2]+rnorm(1,0,1)
}
return(output)
}
yt <- simulates_ar_1(1000,c(1,0.5))
plot(yt,xlab="Instancia",ylab="AR(1)",type = "line")
acf(yt,lag=12)
mean(yt)
1/(1-0.5) #media "teorica"
var(yt)
1/(1-0.5^2)#varianza teorica
?numeric
numeric(n)
numeric(1)
numeric(3)
clear
cls
clc
#podemos ver como distintos valores de phi_1 generan distintos procesos con distintas persistencias
plot(simulates_ar_1(1000,c(1,0.5)),xlab="Instancia",ylab="AR(1)",type = "line")
plot(simulates_ar_1(1000,c(1,0.1)),xlab="Instancia",ylab="AR(1)",type = "line")
plot(simulates_ar_1(1000,c(1,0.9)),xlab="Instancia",ylab="AR(1)",type = "line")
plot(simulates_ar_1(1000,c(1,-0.9)),xlab="Instancia",ylab="AR(1)",type = "line")
acf(simulates_ar_1(1000,c(1,-0.5)),lag=12)
plot(simulates_ar_1(1000,c(1,0.9)),xlab="Instancia",ylab="AR(1)",type = "line")
#Que pasa cuando phi se va por fuera de la unidad
plot(simulates_ar_1(1000,c(1,1)),xlab="Instancia",ylab="AR(1)",type = "line")
plot(simulates_ar_1(1000,c(1,-1)),xlab="Instancia",ylab="AR(1)",type = "line")
plot(simulates_ar_1(1000,c(1,1.01)),xlab="Instancia",ylab="AR(1)",type = "line")
?sample
sample(c('Tomi', 'Lauta'), 2, prob = 0.5)
sample(c('Tomi', 'Lauta'), 1, prob = 0.5)
nombres <- c('Temu', 'Lauta')
length(nombres)
sample(nombres, 2)
sample(nombres, 1)
sample(nombres, 1)
sample(nombres, 1)
sample(nombres, 1, prob = 0.5)
sample(nombres, 1, prob = 0.8)
sample(nombres, 1)
##############################3
#
#DAtos de PBI trimestrales de estados unidos desde1947 a 2010
da=read.table("/Users/tomastemudio/Desktop/Di Tella/Tercer Año/Segundo Semestre/LAB/CLASES TEORICAS/CLASE 13/q-gnp4710.txt",header=T)
head(da)
View(da)
?head
G=da$VALUE
LG=log(G)
gnp=diff(LG)
dim(da)
tdx=c(1:253)/4+1947 # create the time index
plot(tdx,LG,xlab="year",ylab="GNP",type="l")
plot(tdx[2:253],gnp,type="l",xlab="year",ylab="growth")
acf(gnp,lag=12)
pacf(gnp,lag=12) # compute PACF
m1=arima(gnp,order=c(3,0,0))
m1=arima(gnp,order=c(3,0,0))
p1=c(1,-m1$coef[1:3])
r1=polyroot(p1)
k=2*pi/acos(1.616116/1.832674)
k
mm1=ar(gnp,method="mle")
mm1$order
print(mm1$aic,digits=3)
aic=mm1$aic
plot(c(0:12),aic,type="h",xlab="order",ylab="aic")
lines(0:12,aic,lty=2)
acf(gnp,lag=12)
pacf(gnp,lag=12) # compute PACF
rm "nombres"
rm(c('nombres'))
rm(nombres)
?arima
m1
m1$residuals
acf(m1$residuals)
Box.test(m1$residuals,lag=12,type="Ljung")
m9=arima(gnp,order=c(9,0,0))
acf(m9$residuals)
Box.test(m9$residuals,lag=12,type="Ljung")
predict(m1,10)
forecast(m1,h=10,fan=T)
autoplot(forecast(m1,h=40,fan=T))
install.packages("forecast")
library(forecast)
predict(m1,10)
forecast(m1,h=10,fan=T)
autoplot(forecast(m1,h=40,fan=T))
?autoplot
det_2x2([12,12])
det_2x2((12,12))
det_2x2(matrix(c(1,2,2,3)))
det_2x2 <- function(x){
if (! is.matrix(x)){
stop("Debe ingresa una matriz.")
}else if (dim(x)[1] != dim(x)[2]){
stop("Debe ingresar una matriz cuadrada.")
}else if (dim(x)[1] != 2 && dim(x)[2] != 2){
stop('Debe ingresar una matriz de 2x2.')
}else{
cuenta <- (x[1,1] * x[2,2]) -(x[2,1] * x[1,2])
return(cuenta)
}
}
det_2x2(matrix(c(1,2,2,3)))
det_2x2(matrix(c(1,2,2,3,3,4)))
det_2x2(matrix(c(1,2,2)))
matriz <- matrix(c(1,2,3,2))
View(matriz)
View(matriz)
help matrix
?matriz
?matrix
matriz <- matrix(c(1,2,3,2),ncol =2, nrow=2)
View(matriz)
View(matriz)
matriz <- matrix(c(1,2,3,2),ncol =2, nrow=2, byrow = T)
View(matriz)
det_2x2(matriz)
clc
clear
clear all
suma <- function(a,b){
suma_valores = a + b
return(suma_valores)
}
prueba <- suma(2,2)
print(prueba)
prueba <- suma(2,3)
print(prueba)
library(glue)
library(ggplot2)
library(Hmisc)
# EJERCICIO 1
set.seed(123)
simulaciones <- 1000
n1_exp = 30
muestra_exp_30 = rexp(n1_exp, rate = 1)
resultado_exp_30 = c()
for (i in 1:simulaciones) {
resultado_exp_30[i] <- mean(sample(muestra_exp_30, replace = T))
}
media_exp_30 <- mean(resultado_exp_30)
sd_exp_30 <- sd(resultado_exp_30)
hist(resultado_exp_30, main = 'Histograma de resultado con n = 30', xlab = "Media", col = 'lightgreen', prob = T)
lines(density(resultado_exp_30), col = 'blue')
n2_exp = 100
muestra_exp_100 = rexp(n2_exp, rate = 1)
resultado_exp_100 = c()
for (i in 1:simulaciones) {
resultado_exp_100[i] <- mean(sample(muestra_exp_100, replace = T))
}
media_exp_100 <- mean(resultado_exp_100)
sd_exp_100 <- sd(resultado_exp_100)
hist(resultado_exp_100, main = 'Histograma de resultado con n = 100', xlab = "Media", col = 'lightgreen', prob = T,ylim = c(0,6))
lines(density(resultado_exp_100), col = 'darkgreen')
n3_exp = 500
muestra_exp_500 = rexp(n3_exp, rate = 1)
resultado_exp_500 = c()
for (i in 1:simulaciones) {
resultado_exp_500[i] <- mean(sample(muestra_exp_500, replace = T))
}
media_exp_500 <- mean(resultado_exp_500)
sd_exp_500 <- sd(resultado_exp_500)
hist(resultado_exp_500, main = 'Histograma de resultado con n = 500', xlab = "Media", col = 'lightgreen', prob = T, ylim = c(0,10))
lines(density(resultado_exp_500), col = 'red')
#-------------------------------------------------------------------------
#                             EJERCICIO 2
#-------------------------------------------------------------------------
library(archive)
install.packages('archive')
#-------------------------------------------------------------------------
#                             EJERCICIO 2
#-------------------------------------------------------------------------
library(archive)
datos <- archive_read("/Users/tomastemudio/Desktop/Di Tella/Tercer Año/Segundo Semestre/LAB/R/DOMICILIARIO_R/Data_1900_1970.rar")
datos <- archive_read("~/Users/tomastemudio/Desktop/Di Tella/Tercer Año/Segundo Semestre/LAB/R/DOMICILIARIO_R/Data_1900_1970.rar")
datos <- archive_read("/Users/tomastemudio/Desktop/Di Tella/Tercer Año/Segundo Semestre/LAB/R/DOMICILIARIO_R/Data_1900_1970.rar")
rm(datos)
library(tidyquant)
library(ggplot2)
library(dplyr)
library(tidyr)
library(magrittr)
library(quantmod)
stock_prices <- tq_get(c("AAPL","GOOGL","META","TSLA","HON"), from="2012-05-18")
stock_prices %<>% filter(date>="2012-05-18")
View(stock_prices)
View(stock_prices)
stocks_wider <- pivot_wider(select(stock_prices, date, symbol, close),
names_from = symbol,
values_from = close)
View(stocks_wider)
View(stocks_wider)
library(tidyverse)
library(fs)
library(dplyr)
library(tidyr)
setwd("/Users/tomastemudio/Desktop/Di Tella/Tercer Año/Segundo Semestre/LAB/R/DOMICILIARIO_R/Data_1900_1970")
archivos <- list.files(path ="/Users/tomastemudio/Desktop/Di Tella/Tercer Año/Segundo Semestre/LAB/R/DOMICILIARIO_R/Data_1900_1970", pattern = "US")
data <- data.frame()
for (i in 1:length(archivos)){
lectura <- read.csv(archivos[i])
data <- rbind(data, lectura)
}
View(lectura)
View(lectura)
View(data)
View(data)
View(data)
?select
data.frame
?data.frame
data <- data.frame(colnames("fecha"))
View(data)
data <- data.frame(fecha=1:4)
View(data)
data <- data.frame(fecha=:)
data <- data.frame(fecha=null)
data <- data.frame(fecha=NULL)
View(data)
View(data)
?left_join
rm(data)
rm(lectura)
for (i in 1:length(archivos)) {
lectura <- read.csv(archivos[i])
}
View(lectura)
?select
rm(lectura)
for (i in 1:length(archivos)) {
lectura <- read.csv(archivos[i])
agregar <- lectura %>% select(contains("Val"))
data <- left_join(agregar)
}
for (i in 1:length(archivos)) {
lectura <- read.csv(archivos[i])
agregar <- lectura %>% select(contains("Val"))
data <- left_join(agregar)
}
View(agregar)
for (i in 1:length(archivos)) {
lectura <- read.csv(archivos[i])
agregar <- lectura %>% select(contains("Val"))
}
View(agregar)
View(agregar)
for (i in 1:length(archivos)) {
lectura <- read.csv(archivos[i])
agregar <- lectura %>% select(contains("Val"))
left_join(data, agregar)
}
for (i in 1:length(archivos)) {
lectura <- read.csv(archivos[i])
agregar <- lectura %>% select(contains("Val"))
data <- left_join(data,agregar)
}
data <- data.frame(fecha=NULL)
for (i in 1:length(archivos)) {
lectura <- read.csv(archivos[i])
agregar <- lectura %>% select(contains("Val"))
left_join(data, agregar)
}
?left_join
for (i in 1:length(archivos)) {
lectura <- read.csv(archivos[i])
agregar <- lectura %>% select(contains("Val"))
left_join(data, agregar, by = "Val")
}
View(agregar)
View(agregar)
View(data)
for (i in 1:length(archivos)) {
lectura <- read.csv(archivos[i])
agregar <- lectura %>% select(contains("Val"))
left_join(data, agregar)
}
for (i in 1:length(archivos)) {
lectura <- read.csv(archivos[i])
agregar <- lectura %>% select(contains("Val"))
left_join(data, agregar, by = character("Val"))
}
data <- data.frame()
for (i in 1:length(archivos)) {
lectura <- read.csv(archivos[i])
agregar <- lectura %>% select(contains("Val"))
left_join(data, agregar, by = character("Val"))
}
for (i in 1:length(archivos)) {
lectura <- read.csv(archivos[i])
agregar <- lectura %>% select(contains("Val"))
left_join(data, agregar)
}
